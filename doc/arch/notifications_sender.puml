@startuml "Notifications sender module"
!theme toy
'''Часть сервиса уведомлений, отвечающая за создание и администрирование нотификаций'''


'''Хранилища и внешние сервисы'''
cloud "notifications: Storage" {
    database "postgres" {
        [Notifications config]

    }
}

cloud "notifications: Queue" {
    database "rabbitmq" {
        [Realtime queue]
        [Background queue]
    }
}

cloud "notifications: Archive" {
    database "kafka" {
        [Notifications history]
    }
}


'''Компоненты бизнес-логики'''
component "Scheduler: Service" {
    'Компоненты службы'
    [Cron launcher]
}

component "Sender: Service" {
    'Внешние интерфейсы службы'
    port sender.http
    
    port kafka.archive
    portout rabbit.queue

    'Компоненты службы'
    [Enricher]
    note right of [Enricher]:  Batch DB requests to admin\n(weekly likes, daily posts, etc..)\nPrepared content gets send as rabbit message body
    [Realtime Sender]
    [Background Sender]
    [Archiver]

    'Внутренние каналы службы'
    [Background Sender] <--> [Enricher]

    'Обслуживание внешних интерфейсы'
    sender.http --> [Background Sender]: POST
    sender.http --> [Realtime Sender]: POST
    admin.http  <- [Enricher]: GET

    sender.websock --> [Realtime Sender]: Session

    [Archiver] --> kafka.archive
    [Realtime Sender] --> rabbit.queue: realtime
    [Background Sender] --> rabbit.queue: background
    [Background Sender] -> [Archiver]: POST

}


'''Обслуживание внешних и облачных сервисов'''
[Cron launcher] .> [Notifications config]
[Cron launcher] --> sender.http: GET,POST

kafka.archive ..>  [Notifications history]
rabbit.queue ..> [Background queue]
rabbit.queue ..> [Realtime queue]

@enduml
